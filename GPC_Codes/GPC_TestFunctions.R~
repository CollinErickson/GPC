rastrigin <- function(x,A=10) {
  A*length(x) + sum(x^2-A*cospi(2*x))
}

rastrigin.unit <- function(x,A=10,shift=.5,scale=2.5) {
  rastrigin((x-shift)*scale,A)
}

weldnot <- function(x) {
  if (length(x) !=2) {
    stop("weldnot function only works in two dimensions")
  }
  a <- (x[1])*4-2
  b <- (x[2])*4-2
  sqrt(a^2+2*a*b*cos(a)+b^2)
}

ackley <- function(x) {
  if (length(x) !=2) {
    stop("Ackley function only works in two dimensions")
  }
  a <- (x[1])*8-4
  b <- (x[2])*8-4
  -20*exp(-.2*sqrt(.5*(a^2+b^2))) - exp(.5*cos(2*pi*a)+cos(2*pi*b))+exp(1)+20
}

ackley2 <- function(x) {
  if (length(x) !=2) {
    stop("Ackley2 function only works in two dimensions")
  }
  a <- (x[1]-.5)*4
  b <- (x[2]-.5)*4
  -20*exp(-.2*sqrt(.5*(a^2+b^2))) - exp(.5*cos(2*pi*a)+cos(2*pi*b))+exp(1)+20
}

phughes <- function(x) {
   .63 + sum(  (.2*exp(x)+sin(8*pi*x)-x^2-.5*cos(20*pi*x))*sin(pi*x)  )
 }

if (FALSE) {
  curve(sapply(x,phughes),from=0,to=1)
  x <- y <- seq(0,1,.1)
  z <- matrix(-1,length(x),length(y))
  for(i in 1:length(x)){for(j in 1:length(y)) {z[i,j] <- phughes(c(x[i],y[j]))}}
  filled.contour(x,y,z)
}

borehole <- function(xx)
{
  # copied from http://www.sfu.ca/~ssurjano/Code/boreholer.html
  
  ##########################################################################
  #
  # BOREHOLE FUNCTION
  #
  # Authors: Sonja Surjanovic, Simon Fraser University
  #          Derek Bingham, Simon Fraser University
  # Questions/Comments: Please email Derek Bingham at dbingham@stat.sfu.ca.
  #
  # Copyright 2013. Derek Bingham, Simon Fraser University.
  #
  # THERE IS NO WARRANTY, EXPRESS OR IMPLIED. WE DO NOT ASSUME ANY LIABILITY
  # FOR THE USE OF THIS SOFTWARE.  If software is modified to produce
  # derivative works, such modified software should be clearly marked.
  # Additionally, this program is free software; you can redistribute it 
  # and/or modify it under the terms of the GNU General Public License as 
  # published by the Free Software Foundation; version 2.0 of the License. 
  # Accordingly, this program is distributed in the hope that it will be 
  # useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
  # of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
  # General Public License for more details.
  #
  # For function details and reference information, see:
  # http://www.sfu.ca/~ssurjano/
  #
  ##########################################################################
  #
  # OUTPUT AND INPUT:
  #
  # y  = water flow rate
  # xx = c(rw, r, Tu, Hu, Tl, Hl, L, Kw)
  #
  ##########################################################################
  
  if (length(xx)!=8) {
    stop("Borehole function only takes 8-D input")
  }
  
  rw <- xx[1]
  r  <- xx[2]
  Tu <- xx[3]
  Hu <- xx[4]
  Tl <- xx[5]
  Hl <- xx[6]
  L  <- xx[7]
  Kw <- xx[8]
  
  shiftscale <- function(a,b,c) {
    # assuming a is between 0 and 1, moves it into range from b to c
    a*(c-b)+b
  }
  rw <- qnorm (xx[1] , 0.10, 0.0161812 )
  r  <- qlnorm (xx[2] , 7.71, 1.0056 )
  Tu <- shiftscale(xx[3] , 63070, 115600 ) 
  Hu <- shiftscale(xx[4] , 990, 1110 )
  Tl <- shiftscale(xx[5] , 63.1, 116 )
  Hl <- shiftscale(xx[6] , 700, 820 )
  L  <- shiftscale(xx[7] , 1120, 1680 )
  Kw <- shiftscale(xx[8] , 9855, 12045 )
  
  frac1 <- 2 * pi * Tu * (Hu-Hl)
  
  frac2a <- 2*L*Tu / (log(r/rw)*rw^2*Kw)
  frac2b <- Tu / Tl
  frac2 <- log(r/rw) * (1+frac2a+frac2b)
  
  y <- frac1 / frac2
  return(y)
}






RGP <- function(d,npd,seed=NULL,return.all=F,use.GPfit=T,corr.power=2,betas=NULL,...) {
  # Created by Collin Erickson Nov 2015
  require('lhs')
  require('mlegp')
  nn <- npd^d # d*npd  ## nn is number of points
  if (!is.null(seed)) {set.seed(seed)}  # set seed if given, used to replicate
  xx <- lhs::maximinLHS(n = nn,k = d)  # select design pts from lhs
  if(is.null(betas)) betas <- rep(2,d)#runif(d,-1,3)  # correlation coefficients, no clue how to pick them best
  correl <- GPfit::corr_matrix(X=xx,beta = betas,
            corr=list(type='exponential',power=corr.power))  # find correlation matrix
  ch <- chol(correl)  # Find Cholesky facorization
  uu <- runif(nn)  # Generate independent standard normal
  yy <- t(ch)%*% uu  # Convert to multinormal using Cholesky
  #   require(MASS) #DONT USE MASS mvrnorm, my way is 12 times faster for d=6 npd=4
  #   yy <- mvrnorm(1,rep(0,nn),correl)
  #   system.time(yy <- mvrnorm(1,rep(0,nn),correl))
  #   system.time({ch <- chol(correl)  ;    uu <- runif(nn)  ;           yy <- t(ch)%*% uu  })
  #yy <- uu
  minyy <- min(yy)
  maxyy <- max(yy)
  yy <- (yy-minyy)/(maxyy-minyy) # Scale yy to be in [0,1]
  if (use.GPfit) {  # create model based on which is specified
    #mod <- GPfit::GP_fit(xx,yy,control=c(25*d,10*d,2*d),corr=list(type='exponential',power=corr.power))
    # Fit quickly, then change data and parameters of model.
    mod <- GPfit::GP_fit(xx[1:min(10,nn),],yy[1:min(10,nn)],control=c(10,4,2),corr=list(type='exponential',power=corr.power))
    mod$X <- xx
    mod$Y <- yy
    mod$beta <- betas
    mod$delta <- 0
    return.function <- function(aa) {
      aa <- matrix(aa,nrow = 1)
      GPfit::predict.GP(mod,aa)$Y
    }
  } else {
    mod <- mlegp::mlegp(xx,yy,verbose=0,...) 
    #mod <- mlegp::mlegp(xx[1:min(10,nn),],yy[1:min(10,nn),],verbose=0,...) 
    #mlegp::predict.gp(mod,c(.1,2.,3))
    #mod$Z <- yy
    #mod$X <- xx
    #mod$beta <- betas
    #mod$numObs <- length(yy)
    #mod$mu <- rep(mod$mu[1],length(yy))
    return.function <- function(aa) {mlegp::predict.gp(mod,aa)}
  }
  if (return.all) {
    RGP.string <- paste('RGP','d =',d,', npd = ',npd,', nn = ',nn,', use.GPfit = ',use.GPfit,
                        ', betas = ',paste(betas,collapse=', '),
                        ', seed = ',seed,', corr.power = ',corr.power)
    return(
      list(  get=return.function,
             d=d,npd=npd,nn=nn,xx=xx,yy=yy,mod=mod,
             betas=betas,seed=seed,corr.power=corr.power,
             use.GPfit=use.GPfit,
             string=RGP.string)
    )
  } else {
    return(return.function)
  }  
}
